AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC with public and private subnets, a subnet group, and an RDS instance

Parameters:
  StageName:
    Type: String
    Description: Name of the staging Environment (e.g., dev, prod)

  VpcCidrBlock:
    Description: "The CIDR block for the VPC"
    Type: String
    Default: "10.0.0.0/16"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid CIDR block (e.g., 10.0.0.0/16)"

  PublicSubnetCidrBlock:
    Description: "The CIDR block for the Subnet within the VPC"
    Type: String
    Default: "10.0.1.0/24"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid CIDR block (e.g., 10.0.1.0/24)"

  PrivateSubnet1CidrBlock:
    Description: "The CIDR block for the Subnet within the VPC"
    Type: String
    Default: "10.0.2.0/24"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid CIDR block (e.g., 10.0.2.0/24)"

  PrivateSubnet2CidrBlock:
    Description: "The CIDR block for the Subnet within the VPC"
    Type: String
    Default: "10.0.3.0/24"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid CIDR block (e.g., 10.0.3.0/24)"

  DBUserName:
    Description: "Enter your DB UserName"
    Type: String

  DBPassword:
    Description: "Enter your DB Password"
    Type: String

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${StageName}-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${StageName}-InternetGateway'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidrBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value:  !Sub '${StageName}-PublicSubnet1'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value:  !Sub '${StageName}-PrivateSubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value:  !Sub '${StageName}-PrivateSubnet2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:  !Sub '${StageName}-PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${StageName}-NatGateway'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${StageName}-PrivateRouteTable'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value:  !Sub '${StageName}-DBSubnetGroup' 

# Security Group for RDS
# Documentation : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsecuritygroup.html
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      SecurityGroupIngress: 
      - CidrIp: !Ref VpcCidrBlock
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      GroupDescription: "Enable port 3306 MySQL access for RDS"
      Tags:
        - Key: Name
          Value: !Sub '${StageName}-RDSSecurityGroup' 
  
  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Gateway'
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource:
              - 'arn:aws:s3:::*'
              - 'arn:aws:s3:::*/*'
      RouteTableIds:
        - !Ref PrivateRouteTable

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${StageName}-project' 
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: true
      BackupRetentionPeriod: 7
      
# Security Group for Backend
#Documentation : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html
BackEndInstanceSecurityGroup:
  Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${StageName}-BackEndInstanceSecurityGroup'
      GroupDescription: Accept traffic from Web tier
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref WebSecurityGroup
          FromPort: 5000  # Or 8000 or whatever your app runs on
          ToPort: 5000
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref WebSecurityGroup
          FromPort: 80  # If nginx is reverse proxying
          ToPort: 80
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref WebSecurityGroup
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

# Security Group for Web Servers
#Documentation : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${StageName}-WebSecurityGroup'  
      GroupDescription: Enable SSH and HTTP access for frontend
      SecurityGroupIngress: 
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      VpcId: !Ref VPC
      
Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC
  PublicSubnetId:
    Description: "Public Subnet ID"
    Value: !Ref PublicSubnet
  PrivateSubnet1Id:
    Description: "Private Subnet 1 ID"
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: "Private Subnet 2 ID"
    Value: !Ref PrivateSubnet2
  RDSInstanceEndpoint:
    Description: "RDS Instance Endpoint"
    Value: !GetAtt RDSInstance.Endpoint.Address
  RDSInstancePort:
    Description: "RDS Instance Port"
    Value: !GetAtt RDSInstance.Endpoint.Port
