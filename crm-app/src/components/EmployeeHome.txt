<script setup>
import { ref, onMounted } from "vue";
import axios from "axios";
import { url } from "../api/apiurl";
import { RouterLink } from "vue-router";

// State for managing overlays
const showAnnouncementOverlay = ref(false);
const showTasksOverlay = ref(false);

// State for search query and results
const query = ref("");
const results = ref([]);
const hasSearched = ref(false);
const showDropdown = ref(false);
const selectedCustomerId = ref(null);

// Representative information
const repName = ref("");

// Toggle functions for sections
const toggleAnnouncements = () => {
  showAnnouncementOverlay.value = !showAnnouncementOverlay.value;
  if (showAnnouncementOverlay.value) {
    showTasksOverlay.value = false;
  }
};

const toggleTasks = () => {
  showTasksOverlay.value = !showTasksOverlay.value;
  if (showTasksOverlay.value) {
    showAnnouncementOverlay.value = false;
  }
};

// Dummy data for company announcements
const announcements = [
  {
    title: "Company Announcement",
    videoUrl: "https://www.youtube.com/embed/tMya2WkbQgM",
  },
];

// Dummy data for tasks
const tasks = [
  { title: "Complete project report", due: "Today", priority: "high" },
  { title: "Attend team meeting at 3 PM", due: "Today", priority: "medium" },
  { title: "Review code updates", due: "Tomorrow", priority: "low" },
  { title: "Follow up with client", due: "Apr 12", priority: "high" }
];

// Function to search customers
const searchCustomers = async () => {
  if (!query.value.trim()) {
    results.value = [];
    hasSearched.value = false;
    showDropdown.value = false;
    return;
  }

  try {
    const res = await axios.get(url + "/api/customers/search", {
      params: { query: query.value },
    });
    results.value = res.data;
    hasSearched.value = true;
    showDropdown.value = true;
  } catch (err) {
    console.error("Error searching customers:", err);
    results.value = [];
    hasSearched.value = true;
    showDropdown.value = false;
  }
};

// Function to handle customer selection
const selectCustomer = (customer) => {
  query.value = customer.name;
  selectedCustomerId.value = customer.id;
  showDropdown.value = false;
  console.log("Selected customer ID:", customer.id);
};

// Add customer functionality
const addCustomer = () => {
  console.log("Add customer button clicked");
  // Implement customer addition logic here
};

// Function to get the representative's name
async function getRepName(repid) {
  try {
    const response = await axios.get(url + '/api/rep/' + repid + '/name');
    const representative = response.data[0].FirstName + " " + response.data[0].LastName;
    repName.value = representative;
  } catch (error) {
    console.error("Error fetching representative name:", error);
    repName.value = "Agent";
  }
}

onMounted(async () => {
  // TODO: Replace with actual rep ID from user session
  getRepName(1);
});
</script>

<template>
  <div class="page-container">
    <!-- Header -->
    <header class="main-header">
      <div class="header-content">
        <h1>Lalani Insurance Agency</h1>
        <div class="user-info">
          <span>Welcome, {{ repName }}</span>
        </div>
      </div>
    </header>

    <!-- Main Content Area -->
    <div class="content-wrapper">
      <!-- Left Sidebar -->
      <aside class="sidebar">
        <!-- Company Announcements Section -->
        <div class="sidebar-section">
          <h2 class="section-title">Company Announcements</h2>
          <div class="section-content">
            <div class="announcement-preview">
              <p>View the latest company updates and announcements</p>
              <button @click="toggleAnnouncements" class="view-button">View Announcements</button>
            </div>
          </div>
        </div>

        <!-- Tasks Section -->
        <div class="sidebar-section">
          <h2 class="section-title">Task</h2>
          <div class="section-content">
            <div class="task-preview">
              <p>View and manage your pending tasks</p>
              <button @click="toggleTasks" class="view-button">View Tasks</button>
            </div>
          </div>
        </div>
      </aside>

      <!-- Main View -->
      <main class="main-view">
        <!-- Search Bar -->
        <div class="search-container">
          <div class="search-box">
            <input
              v-model="query"
              @input="searchCustomers"
              @focus="showDropdown = true"
              type="text"
              placeholder="Search customers..."
              class="search-input"
            />
            <button class="add-customer-button">
              <RouterLink to="/AddCustomer">+ Add Customer</RouterLink>
            </button>
          </div>

          <!-- Dropdown menu -->
          <ul v-if="showDropdown && results.length > 0" class="search-dropdown">
            <li
              v-for="customer in results"
              :key="customer.id"
              @click="selectCustomer(customer)"
              class="dropdown-item"
            >
              <div class="customer-name">{{ customer.name }}</div>
              <div class="customer-details">
                ID: {{ customer.id }} | {{ customer.email }} | {{ customer.phone }}
              </div>
            </li>
          </ul>

          <p v-if="results.length === 0 && hasSearched" class="no-results">
            No matching customers found.
          </p>
        </div>

        <!-- Dashboard Content -->
        <div class="dashboard-content">
          <h2>Dashboard with info</h2>
          <div class="dashboard-cards">
            <div class="dashboard-card">
              <h3>Active Policies</h3>
              <p class="card-value">42</p>
            </div>
            <div class="dashboard-card">
              <h3>Pending Tasks</h3>
              <p class="card-value">7</p>
            </div>
            <div class="dashboard-card">
              <h3>Recent Customers</h3>
              <p class="card-value">12</p>
            </div>
            <div class="dashboard-card">
              <h3>Expiring Soon</h3>
              <p class="card-value">5</p>
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- Announcement Overlay -->
    <div
      v-if="showAnnouncementOverlay"
      class="overlay"
    >
      <div class="overlay-content">
        <h2>Company Announcement</h2>
        <div class="video-container">
          <iframe
            width="100%"
            height="315"
            src="https://www.youtube.com/embed/tMya2WkbQgM"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
          ></iframe>
        </div>
        <button
          @click="toggleAnnouncements"
          class="close-button"
        >
          Close
        </button>
      </div>
    </div>

    <!-- Tasks Overlay -->
    <div
      v-if="showTasksOverlay"
      class="overlay"
    >
      <div class="overlay-content">
        <h2>Tasks</h2>
        <ul class="tasks-list">
          <li v-for="(task, index) in tasks" :key="index" class="task-item">
            <div class="task-priority" :class="task.priority"></div>
            <div class="task-details">
              <h3>{{ task.title }}</h3>
              <p>Due: {{ task.due }}</p>
            </div>
          </li>
        </ul>
        <button
          @click="toggleTasks"
          class="close-button"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</template>

<style scoped>
/* Base Styles */
.page-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  font-family: Arial, sans-serif;
}

/* Header Styles */
.main-header {
  background-color: #ffffff;
  border-bottom: 2px solid #000000;
  padding: 10px 20px;
  height: 60px;
  display: flex;
  align-items: center;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.header-content h1 {
  font-size: 1.5rem;
  margin: 0;
}

.user-info {
  font-size: 0.9rem;
}

/* Content Layout */
.content-wrapper {
  display: flex;
  flex: 1;
}

/* Sidebar Styles */
.sidebar {
  width: 200px;
  border-right: 2px solid #000000;
  padding: 0;
}

.sidebar-section {
  border-bottom: 2px solid #000000;
  min-height: 200px;
  display: flex;
  flex-direction: column;
}

.sidebar-section:last-child {
  border-bottom: none;
}

.section-title {
  font-size: 1rem;
  text-align: center;
  margin: 0;
  padding: 10px;
  border-bottom: 1px solid #000000;
  background-color: #f5f5f5;
}

.section-content {
  padding: 15px;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.view-button {
  background-color: #0066cc;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 10px;
}

.view-button:hover {
  background-color: #0055aa;
}

/* Main View Styles */
.main-view {
  flex: 1;
  padding: 20px;
}

/* Search Bar Styles */
.search-container {
  position: relative;
  margin-bottom: 20px;
}

.search-box {
  display: flex;
  gap: 10px;
}

.search-input {
  flex: 1;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 1rem;
}

.add-customer-button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 0 15px;
  border-radius: 4px;
  cursor: pointer;
}

.add-customer-button a {
  color: white;
  text-decoration: none;
  display: block;
  height: 100%;
  display: flex;
  align-items: center;
}

.search-dropdown {
  position: absolute;
  width: 100%;
  max-height: 300px;
  overflow-y: auto;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  z-index: 100;
  padding: 0;
  margin: 0;
  list-style: none;
}

.dropdown-item {
  padding: 10px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
}

.dropdown-item:hover {
  background-color: #f5f5f5;
}

.customer-name {
  font-weight: bold;
}

.customer-details {
  font-size: 0.8rem;
  color: #666;
}

.no-results {
  color: #666;
  font-style: italic;
}

/* Dashboard Content */
.dashboard-content {
  background-color: #f9f9f9;
  padding: 20px;
  border-radius: 8px;
}

.dashboard-cards {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
  margin-top: 20px;
}

.dashboard-card {
  background-color: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.dashboard-card h3 {
  margin: 0 0 10px 0;
  font-size: 1rem;
  color: #333;
}

.card-value {
  font-size: 2rem;
  font-weight: bold;
  margin: 0;
  color: #0066cc;
}

/* Overlay Styles */
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.overlay-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  width: 90%;
  max-width: 600px;
}

.video-container {
  margin: 20px 0;
}

.tasks-list {
  list-style: none;
  padding: 0;
  margin: 15px 0;
}

.task-item {
  display: flex;
  gap: 10px;
  padding: 10px;
  border-bottom: 1px solid #eee;
}

.task-priority {
  width: 4px;
  border-radius: 2px;
}

.task-priority.high {
  background-color: #dc3545;
}

.task-priority.medium {
  background-color: #ffc107;
}

.task-priority.low {
  background-color: #28a745;
}

.task-details h3 {
  margin: 0 0 5px 0;
  font-size: 1rem;
}

.task-details p {
  margin: 0;
  font-size: 0.8rem;
  color: #666;
}

.close-button {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 15px;
}

.close-button:hover {
  background-color: #5a6268;
}
</style>